import asyncio
import logging
from typing import Any, Awaitable, Callable, Dict

from aiogram import BaseMiddleware, Bot
from aiogram.types import TelegramObject, User, InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database.action_data_class import DataInteraction
from config_data.config import load_config, Config

config: Config = load_config()
logger = logging.getLogger(__name__)


async def _remind_func(user_id: int, text: str, keyboard: InlineKeyboardMarkup, days: int, bot: Bot):
    await asyncio.sleep(60*60*24*days)
    try:
        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=keyboard
        )
    except Exception:
        ...


class RemindMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        event_from_user: User = data.get('event_from_user')

        if event_from_user is None:
            return await handler(event, data)

        session: DataInteraction = data.get('session')
        await session.set_activity(user_id=event_from_user.id)

        bot: Bot = data.get('bot')
        task_name_1 = f'{event_from_user.id}_2_remind'
        task_name_2 = f'{event_from_user.id}_7_remind'

        for task in asyncio.all_tasks():
            if task.get_name() in [task_name_1, task_name_2]:
                task.cancel()
        keyboard_1 = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='‚¨ÖÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main')]]
        )
        text_1 = ('üëãüèª –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª–∏—Å—å, –∞ –≤–µ–¥—å —è –º–æ–≥—É —Å–Ω–æ–≤–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ:\n\n‚Ä¢ –°–¥–µ–ª–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ '
                  '\n‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å \n‚Ä¢ –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É')
        task_1 = asyncio.create_task(_remind_func(event_from_user.id, text_1, keyboard_1, 2, bot))
        task_1.set_name(task_name_1)

        text_2 = ('–¢—ã –∑–∞–±—ã–ª –æ–±–æ –º–Ω–µ? üò¢\n\n–ê —è —Ç—É—Ç –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ö–æ—Ç—å —Å–µ–π—á–∞—Å ‚Äî —Å–¥–µ–ª–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∏–ª–∏ '
                  '—Ä–µ—à–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É \n\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑üôåüèª')
        keyboard_2 = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='–ó–∞–±—Ä–∞—Ç—å 10 üíé', callback_data='get_free_crystals')]]
        )
        task_2 = asyncio.create_task(_remind_func(event_from_user.id, text_2, keyboard_2, 7, bot))
        task_2.set_name(task_name_2)

        result = await handler(event, data)
        return result
