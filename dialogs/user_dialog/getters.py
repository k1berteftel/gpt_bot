import datetime
import os

from aiogram.types import CallbackQuery, User, Message
from aiogram.fsm.context import FSMContext
from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.api.entities import MediaAttachment
from aiogram_dialog.widgets.kbd import Button, Select
from aiogram_dialog.widgets.input import ManagedTextInput, MessageInput

from services.subgram.api import get_user_tasks, check_user_tasks, check_user_task
from utils.images_funcs import image_to_url, save_bot_files
from utils.ai_funcs import get_prompt_answer, generate_image, generate_on_api, solve_task
from utils.wrapper_funcs import generate_wrapper
from keyboards.keyboard import dialog_keyboard
from database.action_data_class import DataInteraction
from config_data.config import load_config, Config
from datas.constants import prices, get_video_price, duration_prices, model_ratios
from states.state_groups import startSG, DialogSG, PaymentSG


config: Config = load_config()


async def start_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(event_from_user.id)
    admin = False
    admins = [*config.bot.admin_ids]
    admins.extend([admin.user_id for admin in await session.get_admins()])
    if event_from_user.id in admins:
        admin = True
    free = True
    if not user.last_generate or user.last_generate < datetime.datetime.now() - datetime.timedelta(days=1):
        free = True
    bonus_text = "\nüéÅ<b>–ë–æ–Ω—É—Å</b>: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–∞ <b>1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º!</b>" if free else ""
    text = (f'<b>ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ultra GPT!</b>\n\n–Ø ‚Äî —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –≤–∑—è—Ç—å—Å—è –∑–∞ '
            f'–ª—é–±—É—é –∑–∞–¥–∞—á—É! –û–±—â–∞–π—Å—è, —Ç–≤–æ—Ä–∏ –∏ –≤–æ–ø–ª–æ—â–∞–π –∏–¥–µ–∏ –≤ –∂–∏–∑–Ω—å –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n\n<b>‚ú® –ß—Ç–æ —É–º–µ–µ–º?</b>:\n<b>üí¨ –£–º–Ω—ã–π –¥–∏–∞–ª–æ–≥</b> '
            f'‚Äî –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∏—â–∏ –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.\n<b>üé® '
            f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b> ‚Äî –û–ø–∏—à–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–ª–æ–≤–∞–º–∏ ‚Äî –∏ —è –µ—ë –Ω–∞—Ä–∏—Å—É—é. –û—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –¥–æ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ.'
            f'\n<b>üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ</b>. ‚Äî –ü—Ä–µ–≤—Ä–∞—Ç–∏ —Å–≤–æ—é –∏–¥–µ—é –≤ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —è—Ä–∫–æ–µ –≤–∏–¥–µ–æ. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏, —á—Ç–æ '
            f'—Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å! ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–π –∏–¥–µ–∏ –≤ \n\n<b>–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> {user.balance}üíé'
            f' {bonus_text}\n\n'
            f'<b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–µ–º —Ç–≤–æ—Ä–∏—Ç—å! üöÄ</b>')
    return {
        'text': text,
        'admin': admin
    }


async def gpt_switcher(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    print(dialog_manager.middleware_data.get('state'), dialog_manager.middleware_data.get('context'))
    state: FSMContext = dialog_manager.middleware_data.get('state')
    await clb.message.delete()
    if dialog_manager.has_context():
        await dialog_manager.done()
        try:
            await clb.bot.delete_message(chat_id=clb.from_user.id, message_id=clb.message.message_id - 1)
        except Exception:
            ...
        counter = 1
        while dialog_manager.has_context():
            await dialog_manager.done()
            try:
                await clb.bot.delete_message(chat_id=clb.from_user.id, message_id=clb.message.message_id + counter)
            except Exception:
                ...
            counter += 1
    await state.set_state(DialogSG.waiting_for_message)
    await clb.message.answer('–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?', reply_markup=dialog_keyboard)


async def get_task_wrong(msg: Message, widget: MessageInput, dialog_manager: DialogManager):
    await msg.delete()
    await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏')


async def get_task_prompt(msg: Message, widget: MessageInput, dialog_manager: DialogManager):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(msg.from_user.id)
    price = prices['task']
    if user.balance < price:
        await dialog_manager.switch_to(startSG.enough_balance)
        return
    prompt = msg.caption
    image = await image_to_url(msg.photo[-1], msg.bot)
    result = await generate_wrapper(
        solve_task,
        msg.bot,
        msg.from_user.id,
        image, prompt
    )
    if not result:
        await msg.answer('üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        return
    message = await msg.answer_photo(
        photo=result,
    )
    await session.update_balance(msg.from_user.id, -price)
    await session.update_gens(msg.from_user.id)
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(startSG.get_task_photo)


async def gen_prompt_switcher(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    dialog_manager.dialog_data['gen'] = clb.data.split('_')[0]
    await dialog_manager.switch_to(startSG.gen_prompt_menu)


async def gen_prompt_menu_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    gen = dialog_manager.dialog_data.get('gen')
    model = dialog_manager.dialog_data.get('model')
    if gen == 'image':
        if model == 'text':
            text = ('üëá–û–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –∞ —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å '
                    '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
        else:
            text = ('üëá–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ, '
                    '–∞ —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    else:
        if model == 'seedance':
            text = ('üëá–û–ø–∏—à–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –∞ —è –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å '
                    '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
        else:
            text = ('üëá–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ, –∞ —è –ø–æ–º–æ–≥—É –≤–∞–º '
                    '–ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    return {
        'text': text
    }


async def get_gen_prompt_text(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    gen = dialog_manager.dialog_data.get('gen')
    model = dialog_manager.dialog_data.get('model')
    if gen == 'image':
        if model == 'combo':
            await msg.delete()
            await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –Ω–µ–º—É')
            return
    else:
        if model == 'kling':
            await msg.delete()
            await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–∏–¥–µ–æ –∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É —Ñ–æ—Ç–æ')
    if gen == 'image':
        prompt = ('–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–¥ –µ–≥–æ –∑–∞–ø—Ä–æ—Å\n'
                  '!!–í –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–±–æ—é –ø—Ä–æ–º–ø—Ç')
    else:
        prompt = ('–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ–¥ –µ–≥–æ –∑–∞–ø—Ä–æ—Å\n'
                  '!!–í –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–±–æ—é –ø—Ä–æ–º–ø—Ç')
    answer = await generate_wrapper(
        get_prompt_answer,
        msg.bot,
        msg.from_user.id,
        prompt, text
    )
    if not answer:
        await msg.answer('üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        return
    if isinstance(answer, dict):
        await msg.answer(f'üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<code>{answer.get("error")}</code>')
        return
    await msg.answer(f'–í–æ—Ç –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n<code>{answer}</code>')
    if gen == 'image':
        await dialog_manager.switch_to(startSG.get_image_prompt)
    else:
        await dialog_manager.switch_to(startSG.get_video_prompt)


async def get_gen_prompt_message(msg: Message, widget: MessageInput, dialog_manager: DialogManager):
    gen = dialog_manager.dialog_data.get('gen')
    model = dialog_manager.dialog_data.get('model')
    if gen == 'image':
        if model == 'text':
            await msg.delete()
            await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç')
            return
    else:
        if model == 'seedance':
            await msg.delete()
            await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é –≤–∏–¥–µ–æ')

    if gen == 'image':
        prompt = ('–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ–¥ –µ–≥–æ –∑–∞–ø—Ä–æ—Å\n'
                  '!!–í –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–±–æ—é –ø—Ä–æ–º–ø—Ç')
    else:
        prompt = ('–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ–¥ –µ–≥–æ –∑–∞–ø—Ä–æ—Å\n'
                  '!!–í –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–±–æ—é –ø—Ä–æ–º–ø—Ç')
    image = await image_to_url(msg.photo[-1], msg.bot)
    text = msg.caption
    answer = await generate_wrapper(
        get_prompt_answer,
        msg.bot,
        msg.from_user.id,
        prompt, text, image
    )
    if not answer:
        await msg.answer('üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        return
    if isinstance(answer, dict):
        await msg.answer(f'üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<code>{answer.get("error")}</code>')
        return
    if gen == 'image':
        await dialog_manager.switch_to(startSG.get_image_prompt)
    else:
        await dialog_manager.switch_to(startSG.get_video_prompt)
    await msg.answer(f'–í–æ—Ç –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n<code>{answer}</code>')


async def generate_switcher(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    gen = dialog_manager.dialog_data.get('gen')
    dialog_manager.dialog_data['gen'] = None
    if gen == 'image':
        await dialog_manager.switch_to(startSG.get_image_prompt)
    else:
        await dialog_manager.switch_to(startSG.get_video_prompt)


async def image_menu_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    dialog_manager.dialog_data['mode'] = 'image'
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(event_from_user.id)
    free = False
    if not user.last_generate or user.last_generate < datetime.datetime.now() - datetime.timedelta(days=1):
        free = True
    text = (f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å:\n\nüìù<b>"–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"</b> ({prices["image"]["text"]} üíé) '
            f'- —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å —Ç–æ–ª—å–∫–æ'
            f' —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –∞ –ò–ò —Å–∞–º ¬´–ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç¬ª –∏ —Ä–∏—Å—É–µ—Ç —Ç–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n\nüñº<b>"–¢–µ–∫—Å—Ç + —Ñ–æ—Ç–æ"</b> '
            f'({prices["image"]["combo"]} üíé) - –ò–ò '
            f'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–∫ –æ–±—Ä–∞–∑–µ—Ü ‚Äî –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∏–ª—å, –ø–æ–∑—É, —Ü–≤–µ—Ç–∞, –Ω–æ —É–∂–µ —Å –Ω–æ–≤—ã–º '
            f'—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n\n')
    if free:
        text = 'üéÅ<b> –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –≤ —Å—É—Ç–∫–∏.</b> \n\n' + text
    return {
        'text': text
    }


async def image_choose(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    model = clb.data.split('_')[0]
    dialog_manager.dialog_data['model'] = model
    mode = dialog_manager.dialog_data.get('mode')
    price = prices[mode][model]
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(clb.from_user.id)
    free = False
    if model == 'text' and (not user.last_generate or user.last_generate < datetime.datetime.now() - datetime.timedelta(days=1)):
        free = True
    if not free and user.balance < price:
        await dialog_manager.switch_to(startSG.enough_balance)
        return
    await dialog_manager.switch_to(startSG.get_image_prompt)


async def get_image_prompt_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    model = dialog_manager.dialog_data.get('model')
    if model == 'text':
        hint = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'
    else:
        hint = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –∫ –Ω–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ'
    return {
        'hint': hint
    }


async def get_image_text(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    model = dialog_manager.dialog_data.get('model')
    mode = dialog_manager.dialog_data.get('mode')
    if model == 'combo':
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –Ω–µ–º—É')
        return
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    result = await generate_wrapper(
        generate_image,
        msg.bot,
        msg.from_user.id,
        text
    )
    if isinstance(result, dict):
        await msg.answer(f'üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<code>{result.get("error")}</code>')
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(startSG.start)
        return
    if not result:
        await msg.answer('üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(startSG.start)
        return
    message = await msg.answer_photo(
        photo=result,
        caption='‚úÖ–í–∞—à–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞'
    )
    await msg.bot.copy_message(
        chat_id=config.bot.channel_id,
        from_chat_id=message.chat.id,
        message_id=message.message_id
    )
    model = dialog_manager.dialog_data.get('model')
    price = prices[mode][model]
    user = await session.get_user(msg.from_user.id)
    if not user.last_generate or user.last_generate < datetime.datetime.now() - datetime.timedelta(days=1):
        await session.update_last_generate(user.user_id, datetime.datetime.now())
    else:
        await session.update_balance(msg.from_user.id, -price)
    await session.update_gens(msg.from_user.id)
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(startSG.start)


async def get_image_prompt(msg: Message, widget: MessageInput, dialog_manager: DialogManager):
    model = dialog_manager.dialog_data.get('model')
    mode = dialog_manager.dialog_data.get('mode')
    if model == 'text':
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç')
        return
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    text = msg.caption
    images = await save_bot_files(msg.photo, msg.bot)
    result = await generate_wrapper(
        generate_image,
        msg.bot,
        msg.from_user.id,
        text, images
    )
    for image in images:
        if os.path.exists(image):
            os.remove(image)
    if isinstance(result, dict):
        await msg.answer(f'üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<code>{result.get("error")}</code>')
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(startSG.start)
        return
    if not result:
        await msg.answer('üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(startSG.start)
        return
    message = await msg.answer_photo(
        photo=result,
        caption='‚úÖ–í–∞—à–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞'
    )
    await msg.bot.copy_message(
        chat_id=config.bot.channel_id,
        from_chat_id=message.chat.id,
        message_id=message.message_id
    )
    model = dialog_manager.dialog_data.get('model')
    price = prices[mode][model]
    await session.update_balance(msg.from_user.id, -price)
    await session.update_gens(msg.from_user.id)
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(startSG.start)


async def get_image_wrong(msg: Message, widget: MessageInput, dialog_manager: DialogManager):
    model = dialog_manager.dialog_data.get('model')
    if model == 'text':
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç')
    else:
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫ –Ω–µ–º—É')


async def video_choose(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    model = clb.data.split('_')[0]
    dialog_manager.dialog_data['model'] = model
    dialog_manager.dialog_data['mode'] = 'video'
    if model in ['seedance']:
        await dialog_manager.switch_to(startSG.video_model_menu)
        return
    mode = dialog_manager.dialog_data.get('mode')
    model = dialog_manager.dialog_data.get('model')
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(clb.from_user.id)
    price = prices[mode][model]
    if user.balance < price:
        await dialog_manager.switch_to(startSG.enough_balance)
        return
    await dialog_manager.switch_to(startSG.get_video_prompt)


async def video_model_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    model = dialog_manager.dialog_data.get('model')
    text = ('ü§ñSeedance\n\n<b>Lite</b> ‚Äî —ç—Ç–æ –∫–∞–∫ ¬´–ª–∞–π—Ç-–≤–µ—Ä—Å–∏—è¬ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: —Å–∞–º–æ–µ –ø—Ä–æ—Å—Ç–æ–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.\n\n'
            '<b>Pro</b> ‚Äî —ç—Ç–æ –∫–∞–∫ ¬´–ø—Ä–µ–º–∏—É–º¬ª: –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π, –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫—Ä—É—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n'
            '‚òùÔ∏è–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ - –±–µ—Ä–∏ Lite. –ï—Å–ª–∏ –ª—é–±–∏—à—å ¬´–ø–æ –º–∞–∫—Å–∏–º—É–º—É¬ª - —Ç–æ–≥–¥–∞ Pro.')
    buttons = [
        ('Seedance 1 Lite', 'lite'),
        ('Seedance 1 Pro', 'pro')
    ]
    return {
        'text': text,
        'items': buttons
    }


async def sub_model_choose(clb: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    dialog_manager.dialog_data['sub_model'] = item_id
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(clb.from_user.id)
    mode = dialog_manager.dialog_data.get('mode')
    model = dialog_manager.dialog_data.get('model')
    sub_model = dialog_manager.dialog_data.get('sub_model')
    price = prices[mode][model].get(sub_model) if sub_model else prices[mode][model]
    if user.balance < price:
        await dialog_manager.switch_to(startSG.enough_balance)
        return
    await dialog_manager.switch_to(startSG.get_video_prompt)


async def get_video_prompt_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    model = dialog_manager.dialog_data.get('model')
    params = dialog_manager.dialog_data.get('params')
    if not params and model in duration_prices.keys():
        params = {
            'duration': 5,
            'aspect_ratio': '9:16'
        }
        dialog_manager.dialog_data['params'] = params
    params_text = ''
    if params:
        params['price'] = get_video_price(dialog_manager.dialog_data)
        dialog_manager.dialog_data['params'] = params
        params_text = (f' - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: <b>{params.get("duration")}</b>\n - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: '
                       f'<b>{params.get("aspect_ratio")} —Å–µ–∫</b>\n - –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{params.get("price")} üíé</b>')
    if model == 'seedance':
        hint = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'
    else:
        hint = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –∫ –Ω–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å –Ω–∞ –≤–∏–¥–µ–æ —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ'
    return {
        'hint': hint,
        'params': params_text,
        'is_param': bool(params)
    }


async def get_video_text(msg: Message, widget: ManagedTextInput, dialog_manager: DialogManager, text: str):
    model = dialog_manager.dialog_data.get('model')
    if model == 'kling':
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–∏–¥–µ–æ –∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É —Ñ–æ—Ç–æ')
        return
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    params = dialog_manager.dialog_data.get('params')
    mode = dialog_manager.dialog_data.get('mode')
    sub_model = dialog_manager.dialog_data.get('sub_model')
    user = await session.get_user(msg.from_user.id)
    model_name = model
    if model in ['seedance']:
        model_name = model + "_" + sub_model
    params['model_name'] = model_name
    params['prompt'] = text
    price = get_video_price(dialog_manager.dialog_data)
    if user.balance < price:
        await dialog_manager.switch_to(startSG.enough_balance)
        return
    result = await generate_wrapper(
        generate_on_api,
        msg.bot,
        msg.from_user.id,
        params
    )
    if isinstance(result, dict):
        await msg.answer(f'üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<code>{result.get("error")}</code>')
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(startSG.start)
        return
    if not result:
        await msg.answer('üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        dialog_manager.dialog_data.clear()
        await dialog_manager.switch_to(startSG.start)
        return
    message = await msg.answer_video(
        video=result,
        caption='‚úÖ–í–∞—à–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞'
    )
    await msg.bot.copy_message(
        chat_id=config.bot.channel_id,
        from_chat_id=message.chat.id,
        message_id=message.message_id
    )
    await session.update_balance(msg.from_user.id, -price)
    await session.update_gens(msg.from_user.id)
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(startSG.start)


async def get_video_prompt(msg: Message, widget: MessageInput, dialog_manager: DialogManager):
    model = dialog_manager.dialog_data.get('model')
    if model == 'seedance':
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é –≤–∏–¥–µ–æ')
        return
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    params = dialog_manager.dialog_data.get('params')
    mode = dialog_manager.dialog_data.get('mode')
    sub_model = dialog_manager.dialog_data.get('sub_model')
    user = await session.get_user(msg.from_user.id)
    model_name = model
    if model in ['seedance']:
        model_name = model + "_" + sub_model
    params['model_name'] = model_name
    params['prompt'] = msg.caption
    params['image_url'] = await image_to_url(msg.photo[-1], msg.bot)
    price = get_video_price(dialog_manager.dialog_data)
    if user.balance < price:
        await dialog_manager.switch_to(startSG.enough_balance)
        return
    result = await generate_wrapper(
        generate_on_api,
        msg.bot,
        msg.from_user.id,
        params
    )
    if isinstance(result, dict):
        await msg.answer(f'üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n<code>{result.get("error")}</code>')
        return
    if not result:
        await msg.answer('üö®–í–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        return
    message = await msg.answer_video(
        video=result,
        caption='‚úÖ–í–∞—à–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞'
    )
    await msg.bot.copy_message(
        chat_id=config.bot.channel_id,
        from_chat_id=message.chat.id,
        message_id=message.message_id
    )
    await session.update_balance(msg.from_user.id, -price)
    dialog_manager.dialog_data.clear()
    await dialog_manager.switch_to(startSG.start)


async def get_video_wrong(msg: Message, widget: MessageInput, dialog_manager: DialogManager):
    model = dialog_manager.dialog_data.get('model')
    if model == 'seedance':
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é –≤–∏–¥–µ–æ')
    else:
        await msg.delete()
        await msg.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∫ –Ω–µ–º—É')


async def time_choose_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    model = dialog_manager.dialog_data.get('model')
    sub_model = dialog_manager.dialog_data.get('sub_model')
    params = dialog_manager.dialog_data.get('params')
    current_duration = params.get('duration')
    model_name = model
    if model in ['seedance']:
        model_name = model + '_' + sub_model
    buttons = [
        (f'{"‚úÖ" if duration == current_duration else ""}{duration} —Å–µ–∫', duration)
        for duration in duration_prices.get(model_name).keys()
    ]
    return {
        'items': buttons
    }


async def time_selector(clb: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    params = dialog_manager.dialog_data.get('params')
    duration = int(item_id)
    params['duration'] = duration
    dialog_manager.dialog_data['params'] = params
    await dialog_manager.switch_to(startSG.get_video_prompt)


async def ratio_choose_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    model = dialog_manager.dialog_data.get('model')
    params = dialog_manager.dialog_data.get('params')
    current_ratio = params.get('aspect_ratio')
    buttons = [
        (f'{"‚úÖ" if ratio == current_ratio else ""}{ratio} —Å–µ–∫', ratio)
        for ratio in model_ratios.get(model)
    ]
    return {
        'items': buttons
    }


async def ratio_selector(clb: CallbackQuery, widget: Select, dialog_manager: DialogManager, item_id: str):
    params = dialog_manager.dialog_data.get('params')
    ratio = int(item_id)
    params['aspect_ratio'] = ratio
    dialog_manager.dialog_data['params'] = params
    await dialog_manager.switch_to(startSG.get_video_prompt)


async def balance_check_switcher(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(clb.from_user.id)
    switcher = clb.data.split('_')[0]
    if switcher == 'task':
        if user.balance < prices['task']:
            dialog_manager.dialog_data['mode'] = switcher
            await dialog_manager.switch_to(startSG.enough_balance)
            return
        await dialog_manager.switch_to(startSG.get_task_photo)
    mode = dialog_manager.dialog_data.get('mode')
    model = dialog_manager.dialog_data.get('model')
    print(mode, model)
    if switcher == 'image':
        price = prices[mode][model]
    else:
        sub_model = dialog_manager.dialog_data.get('sub_model')
        price = prices[mode][model].get(sub_model) if sub_model else prices[mode][model]
    free = False
    if model == 'text' and (not user.last_generate or user.last_generate < datetime.datetime.now() - datetime.timedelta(days=1)):
        free = True
    if not free and user.balance < price:
        await dialog_manager.switch_to(startSG.enough_balance)
        return
    if switcher == 'image':
        await dialog_manager.switch_to(startSG.get_image_prompt)
    else:
        await dialog_manager.switch_to(startSG.get_video_prompt)


async def profile_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(event_from_user.id)
    text = (f'<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n<b>–ë–∞–ª–∞–Ω—Å</b>: {user.balance} üíé\n\n<b>üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n'
            f'–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:\n - –ø–æ 10 üíé –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ\n - 10% –æ—Ç –≤—Å–µ—Ö '
            f'–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–πüí∞ –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –±–æ—Ç–µ ‚Äî –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ!\nüìé<b>K–í–∞—à–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞:</b> \n'
            f'<code>https://t.me/ultragpt_robot?start={event_from_user.id}</code>\n\n<b>üì§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>'
            f'\n\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{user.refs}</b>\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{user.earn} üíé</b>')
    url = f'http://t.me/share/url?url=https://t.me/ultragpt_robot?start={event_from_user.id}'
    return {
        'text': text,
        'url': url
    }


async def help_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    text = '...'
    return {
        'text': text
    }


async def enough_balance_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    user = await session.get_user(event_from_user.id)
    mode = dialog_manager.dialog_data.get('mode')
    model = dialog_manager.dialog_data.get('model')
    if mode == 'image':
        price = prices[mode][model]
    elif mode == 'task':
        price = prices[mode]
    else:
        sub_model = dialog_manager.dialog_data.get('sub_model')
        price = prices[mode][model].get(sub_model) if sub_model else prices[mode][model]
    url = f'https://t.me/ultragpt_robot?start={event_from_user.id}'
    return {
        'price': price,
        'balance': user.balance,
        'url': url
    }


async def tasks_menu_getter(event_from_user: User, dialog_manager: DialogManager, **kwargs):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    tasks = dialog_manager.dialog_data.get('tasks')
    if not tasks:
        tasks = await get_user_tasks(event_from_user.id, bool(event_from_user.is_premium))
        if not tasks:
            tasks = []
        else:
            dialog_manager.dialog_data['tasks'] = tasks
    page = dialog_manager.dialog_data.get('page')
    if not page:
        page = 0
        dialog_manager.dialog_data['page'] = page
    current_task = tasks[page] if tasks else None

    not_first = False
    not_last = False
    if page != 0:
        not_first = True
    if len(tasks) and page != len(tasks) - 1:
        not_last = True
    amount = 5
    if tasks:
        text = f'<b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ {page + 1}</b>\n'
    else:
        text = '‚ùóÔ∏è–í–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
    return {
        'text': text,
        'url': current_task,
        'amount': amount,
        'page': f'{page + 1}/{len(tasks)}',
        'tasks': bool(tasks),
        'not_first': not_first,
        'not_last': not_last
    }


async def tasks_pager(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    page = dialog_manager.dialog_data.get('page')
    action = clb.data.split('_')[0]
    if action == 'back':
        page -= 1
    else:
        page += 1
    dialog_manager.dialog_data['page'] = page
    await dialog_manager.switch_to(startSG.tasks_menu)


async def check_task(clb: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    session: DataInteraction = dialog_manager.middleware_data.get('session')
    tasks: list[str] = dialog_manager.dialog_data.get('tasks')
    page = dialog_manager.dialog_data.get('page')
    current_task = tasks[page]
    status = await check_user_task(clb.from_user.id, current_task)
    if not status:
        await clb.answer('‚ùóÔ∏è–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è')
        return
    amount = 5
    await clb.answer(f'+{amount}üíé')
    await session.update_balance(clb.from_user.id, amount)
    tasks.pop(page)
    dialog_manager.dialog_data['tasks'] = tasks
    dialog_manager.dialog_data['page'] = 0
    await dialog_manager.switch_to(startSG.tasks_menu)
